'''
======================
3D surface (color map)
======================

Demonstrates plotting a 3D surface colored with the coolwarm color map.
The surface is made opaque by using antialiased=False.

Also demonstrates using the LinearLocator and custom formatting for the
z axis tick labels.
'''

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import numpy as np
from scipy import interpolate
import statistics as stats

#fig = plt.figure()
#ax = fig.gca(projection='3d')

#X = np.arange(17800.63, 28980.63, 1118)
#Y = np.arange(3615.0, 22245, 1863)
#newest data
X = np.arange(40, 1640, 80)
Y = np.arange(40, 2600, 80)
X_mesh = X
Y_mesh = Y
X_mesh, Y_mesh = np.meshgrid(X, Y)


##no dye
#Z_real1 = [[48.898125, 48.880250000000004, 48.870375, 48.85637500000001, 48.8355, 48.82150000000001, 48.80350000000001, 48.785500000000006, 48.76362500000001], [48.861625000000004, 48.848625, 48.830875000000006, 48.824000000000005, 48.804, 48.78800000000001, 48.75812500000001, 48.74725, 48.726375000000004], [48.83450000000001, 48.8265, 48.808625000000006, 48.800625000000004, 48.77875000000001, 48.766875000000006, 48.73512500000001, 48.721250000000005, 48.691500000000005], [48.798750000000005, 48.79175, 48.771750000000004, 48.76475, 48.74875000000001, 48.73287500000001, 48.707, 48.68525000000001, 48.665375000000004], [48.77650000000001, 48.7625, 48.75150000000001, 48.736625000000004, 48.723625000000006, 48.705625000000005, 48.684625000000004, 48.653875000000006, 48.62887500000001]]
#
#Z_real1 = np.array(Z_real1)

#w/ dye
#Z_real2 = [[48.869000000000014, 48.870000000000005, 48.869, 48.864000000000004, 48.868, 48.864875, 48.859875, 48.859, 48.868, 48.86300000000001], [48.850000000000016, 48.855125, 48.849125, 48.844125000000005, 48.849125, 48.844125000000005, 48.83925000000001, 48.844375, 48.8445, 48.841499999999996], [48.83900000000002, 48.835125000000005, 48.833125, 48.830125, 48.827374999999996, 48.828625, 48.823875, 48.829875, 48.827125, 48.82212500000001], [48.81400000000003, 48.818000000000005, 48.814, 48.809125, 48.81125, 48.809375, 48.8055, 48.808625, 48.807750000000006, 48.804], [48.80000000000003, 48.797125, 48.79825, 48.7955, 48.79475, 48.794000000000004, 48.79125, 48.79537500000001, 48.795625, 48.79275], [48.78900000000004, 48.794125, 48.79025, 48.784375, 48.7875, 48.784625, 48.77975000000001, 48.78775, 48.785, 48.781], [48.78100000000004, 48.78212500000001, 48.78025, 48.774375, 48.77550000000001, 48.774625, 48.77175, 48.776875000000004, 48.777, 48.775125], [48.773000000000046, 48.776125, 48.771375000000006, 48.767500000000005, 48.76862500000001, 48.77875, 48.766875, 48.773875000000004, 48.77, 48.764], [48.77000000000005, 48.769125, 48.76525, 48.764375, 48.7615, 48.758625, 48.757875000000006, 48.764125, 48.76025, 48.7565], [48.76200000000006, 48.764125, 48.76025, 48.7605, 48.75475, 48.755, 48.750125000000004, 48.75625, 48.7535, 48.750625]]

#newest focus data
Z_real2 = [[-49.22300000000001, -49.217, -49.216125000000005, -49.22225, -49.215250000000005, -49.213375000000006, -49.209375, -49.206375, -49.204375000000006, -49.206375, -49.211375000000004, -49.207375, -49.205375000000004, -49.203375, -49.205375000000004, -49.207375, -49.206375, -49.204375000000006, -49.202375, -49.20637500000001],[-49.218000000000025, -49.21300000000001, -49.209125, -49.217375000000004, -49.2115, -49.209625, -49.20575, -49.201875, -49.198875, -49.200875, -49.20487500000001, -49.200875, -49.199000000000005, -49.19712500000001, -49.20125, -49.202375, -49.1995, -49.197500000000005, -49.1975, -49.1995],[-49.20900000000003, -49.205125, -49.20125, -49.21425000000001, -49.203375, -49.203375, -49.1975, -49.19562500000001, -49.19175, -49.194, -49.197125, -49.19425, -49.190375, -49.188500000000005, -49.1925, -49.195625, -49.191625, -49.18962500000001, -49.188625, -49.19287500000001],[-49.202000000000034, -49.19712500000001, -49.195375000000006, -49.20250000000001, -49.196625, -49.195875, -49.191875, -49.188875, -49.186, -49.187250000000006, -49.1895, -49.183749999999996, -49.182875, -49.180125, -49.184375, -49.186625, -49.181625000000004, -49.182625, -49.18075, -49.183875],[-49.201000000000036, -49.195, -49.19225, -49.199375, -49.195375000000006, -49.193625000000004, -49.188875, -49.185125, -49.182375, -49.184375, -49.186625, -49.181875000000005, -49.18000000000001, -49.178000000000004, -49.183125000000004, -49.183375, -49.179375, -49.179625, -49.18987500000001, -49.182125000000006],[-49.19600000000004, -49.19112500000001, -49.186125000000004, -49.196125, -49.190375, -49.187375, -49.183375000000005, -49.179625, -49.176875, -49.179125, -49.183375000000005, -49.176625, -49.175875000000005, -49.172125, -49.177375000000005, -49.179625, -49.17575, -49.17575, -49.173750000000005, -49.17575],[-49.18900000000004, -49.184125, -49.180375000000005, -49.188500000000005, -49.1845, -49.18175, -49.177875, -49.173875, -49.170875, -49.172875000000005, -49.177875, -49.170875, -49.170875, -49.166875000000005, -49.171125, -49.17512500000001, -49.169125, -49.169375, -49.16762500000001, -49.16887500000001],[-49.185000000000045, -49.179, -49.175250000000005, -49.1835, -49.17775, -49.177, -49.17025, -49.169375, -49.164500000000004, -49.16875, -49.170875, -49.165125, -49.16425, -49.161375, -49.166375, -49.168625000000006, -49.162875, -49.163125, -49.162125, -49.165125],[-49.17700000000005, -49.172000000000004, -49.169, -49.17625, -49.1705, -49.16875, -49.162, -49.16125, -49.157375, -49.160625, -49.162875, -49.157125, -49.15837500000001, -49.153625000000005, -49.157875000000004, -49.161125, -49.156375000000004, -49.156625, -49.154875000000004, -49.157125],[-49.17000000000005, -49.166000000000004, -49.161, -49.169000000000004, -49.165, -49.164, -49.157000000000004, -49.154125, -49.150375000000004, -49.153375, -49.156375, -49.149625, -49.149625, -49.148625, -49.151625, -49.153625000000005, -49.148625, -49.14962500000001, -49.148875000000004, -49.148875],[-49.16400000000006, -49.160000000000004, -49.15625, -49.161500000000004, -49.15875, -49.157000000000004, -49.15125, -49.14825, -49.14525, -49.1485, -49.15075, -49.14475, -49.145, -49.14225, -49.1465, -49.14775, -49.144000000000005, -49.145250000000004, -49.1425, -49.14275],[-49.16500000000006, -49.16125, -49.15825, -49.16525000000001, -49.161500000000004, -49.1585, -49.1535, -49.151500000000006, -49.14775, -49.15200000000001, -49.154250000000005, -49.14825, -49.147375000000004, -49.144625, -49.149625, -49.150875000000006, -49.146125000000005, -49.145375, -49.14362500000001, -49.141875000000006],[-49.158000000000065, -49.155, -49.15225, -49.15950000000001, -49.1555, -49.1525, -49.1465, -49.14675, -49.143, -49.14425000000001, -49.1465, -49.140625, -49.139625, -49.136875, -49.138875000000006, -49.145125, -49.138375, -49.13637500000001, -49.137375000000006, -49.139375],[-49.15400000000007, -49.150000000000006, -49.147, -49.15225, -49.15050000000001, -49.15075, -49.142, -49.141000000000005, -49.139, -49.141000000000005, -49.143, -49.139250000000004, -49.1355, -49.133750000000006, -49.134750000000004, -49.13775, -49.13375, -49.13275, -49.13275, -49.134750000000004],[-49.15000000000007, -49.147125, -49.14212500000001, -49.149125000000005, -49.146125, -49.145125, -49.139125, -49.136125, -49.135125, -49.138125, -49.140125000000005, -49.134125, -49.132125, -49.129125, -49.131125000000004, -49.134375, -49.131375, -49.128625, -49.127875, -49.132125],[-49.14800000000008, -49.14300000000001, -49.13725, -49.14425000000001, -49.142250000000004, -49.1375, -49.13275, -49.13100000000001, -49.129250000000006, -49.1315, -49.13075, -49.126000000000005, -49.12525, -49.12050000000001, -49.127625, -49.126625000000004, -49.125625, -49.124875, -49.124125, -49.128375000000005],[-49.14200000000008, -49.13625, -49.13525, -49.139250000000004, -49.1385, -49.13575, -49.130750000000006, -49.12775, -49.125, -49.12825, -49.127500000000005, -49.12375, -49.123000000000005, -49.12025, -49.1255, -49.12375, -49.123000000000005, -49.120125, -49.120125, -49.12437500000001],[-49.14100000000008, -49.133, -49.13025, -49.1365, -49.1345, -49.12975, -49.125875, -49.123875000000005, -49.118875, -49.123000000000005, -49.12125, -49.1195, -49.11775000000001, -49.115, -49.12225000000001, -49.12050000000001, -49.11975, -49.117, -49.116, -49.118],[-49.13900000000009, -49.135000000000005, -49.13225, -49.13637500000001, -49.13462500000001, -49.127625, -49.12287500000001, -49.121125000000006, -49.116125000000004, -49.121375, -49.120375, -49.11825, -49.117250000000006, -49.11425, -49.11925, -49.11825, -49.11625000000001, -49.114250000000006, -49.11525, -49.11525],[-49.13400000000009, -49.130250000000004, -49.126375, -49.1315, -49.12950000000001, -49.124625, -49.120625000000004, -49.119875, -49.115875, -49.121875, -49.118, -49.117250000000006, -49.11625, -49.114250000000006, -49.11825, -49.117250000000006, -49.11725, -49.11525, -49.11325000000001, -49.11325],[-49.1330000000001, -49.12800000000001, -49.124, -49.129000000000005, -49.128, -49.122, -49.119, -49.117000000000004, -49.114, -49.118, -49.117000000000004, -49.116, -49.113, -49.112, -49.11600000000001, -49.116, -49.114000000000004, -49.113, -49.112, -49.111000000000004],[-49.13300000000011, -49.129000000000005, -49.126, -49.130250000000004, -49.12825, -49.124500000000005, -49.119625000000006, -49.117625000000004, -49.111625, -49.117875, -49.115125, -49.113125000000004, -49.112125, -49.109375, -49.113625000000006, -49.112625, -49.11087500000001, -49.110125000000004, -49.108375, -49.108625],[-49.127000000000116, -49.12225, -49.118500000000004, -49.1235, -49.121500000000005, -49.1175, -49.11375, -49.110875, -49.107125, -49.113375, -49.110625, -49.107875, -49.105875000000005, -49.104875, -49.109875, -49.109875, -49.108125, -49.106125000000006, -49.104125, -49.104375],[-49.126000000000126, -49.121, -49.114250000000006, -49.1195, -49.11775000000001, -49.114000000000004, -49.11125, -49.10725, -49.10325, -49.1095, -49.1085, -49.106750000000005, -49.105000000000004, -49.104, -49.108000000000004, -49.106, -49.106, -49.104000000000006, -49.104, -49.103],[-49.12500000000013, -49.121, -49.117000000000004, -49.12, -49.117, -49.112, -49.109, -49.106, -49.102000000000004, -49.107, -49.10325, -49.1025, -49.10175, -49.100750000000005, -49.103, -49.10125000000001, -49.102500000000006, -49.100750000000005, -49.10075, -49.099000000000004],[-49.12200000000013, -49.11825, -49.11325000000001, -49.11525, -49.114250000000006, -49.10725, -49.1045, -49.10275000000001, -49.098000000000006, -49.10425, -49.101375, -49.099625, -49.099625, -49.097875, -49.10187500000001, -49.1, -49.1, -49.099000000000004, -49.099, -49.097],[-49.12000000000013, -49.116, -49.111000000000004, -49.11225, -49.1145, -49.1075, -49.10475, -49.102, -49.097875, -49.102875000000004, -49.101125, -49.100125000000006, -49.099125, -49.097125000000005, -49.101125, -49.099375, -49.10037500000001, -49.097625, -49.096625, -49.095625000000005],[-49.11800000000014, -49.11325000000001, -49.10850000000001, -49.10875, -49.110875, -49.105125, -49.102375, -49.10062500000001, -49.093875000000004, -49.099875, -49.099875, -49.100875, -49.096875000000004, -49.094875, -49.097875, -49.096875000000004, -49.095875, -49.096875000000004, -49.095875, -49.095875],[-49.12200000000014, -49.11825, -49.1145, -49.11375, -49.119, -49.111000000000004, -49.10825, -49.10225, -49.09725, -49.10125000000001, -49.10125, -49.099250000000005, -49.09825, -49.096250000000005, -49.09825, -49.09825, -49.096250000000005, -49.09725, -49.09825000000001, -49.096250000000005],[-49.11900000000014, -49.115, -49.111000000000004, -49.11125, -49.114375, -49.104625, -49.100875, -49.097875, -49.09287500000001, -49.098125, -49.097125000000005, -49.097125, -49.096125, -49.09425, -49.0965, -49.0955, -49.094500000000004, -49.09375, -49.09375, -49.09275],[-49.11600000000014, -49.10625, -49.10125000000001, -49.10125, -49.10625, -49.10025, -49.09825000000001, -49.0955, -49.08975, -49.096000000000004, -49.09425, -49.0935, -49.091750000000005, -49.091, -49.09225000000001, -49.0925, -49.09075000000001, -49.091, -49.091125, -49.089375000000004],[-49.11500000000015, -49.11325000000001, -49.10925, -49.10725000000001, -49.11225, -49.1065, -49.10575, -49.09975, -49.09375, -49.09975, -49.097750000000005, -49.09675, -49.096000000000004, -49.093125, -49.095125, -49.094375, -49.091625, -49.090625, -49.09162500000001, -49.090625]]

##max brightness
#Z_real2 = [[788.0, 778.0, 786.0, 778.0, 781.0, 773.0, 782.0, 772.0, 774.0, 766.0, 771.0, 760.0, 753.0, 747.0, 746.0, 734.0, 727.0, 709.0, 698.0, 677.0], [773.0, 789.0, 777.0, 786.0, 788.0, 777.0, 773.0, 774.0, 764.0, 771.0, 765.0, 768.0, 756.0, 752.0, 742.0, 747.0, 727.0, 715.0, 691.0, 679.0], [784.0, 795.0, 777.0, 782.0, 781.0, 785.0, 774.0, 786.0, 767.0, 772.0, 772.0, 772.0, 760.0, 754.0, 749.0, 746.0, 730.0, 725.0, 701.0, 691.0], [790.0, 785.0, 784.0, 787.0, 791.0, 783.0, 774.0, 783.0, 774.0, 770.0, 771.0, 771.0, 762.0, 767.0, 758.0, 752.0, 737.0, 722.0, 720.0, 679.0], [800.0, 794.0, 800.0, 784.0, 788.0, 779.0, 776.0, 772.0, 784.0, 785.0, 773.0, 768.0, 761.0, 766.0, 753.0, 757.0, 742.0, 732.0, 695.0, 690.0], [787.0, 793.0, 792.0, 793.0, 788.0, 792.0, 778.0, 786.0, 779.0, 777.0, 782.0, 773.0, 767.0, 768.0, 754.0, 750.0, 735.0, 733.0, 712.0, 701.0], [796.0, 793.0, 785.0, 785.0, 800.0, 783.0, 779.0, 789.0, 778.0, 780.0, 776.0, 780.0, 775.0, 767.0, 767.0, 757.0, 756.0, 732.0, 714.0, 695.0], [793.0, 797.0, 782.0, 787.0, 787.0, 789.0, 782.0, 778.0, 773.0, 774.0, 784.0, 777.0, 774.0, 770.0, 771.0, 757.0, 752.0, 719.0, 720.0, 691.0], [785.0, 786.0, 790.0, 784.0, 783.0, 787.0, 791.0, 776.0, 770.0, 774.0, 774.0, 772.0, 770.0, 767.0, 757.0, 761.0, 743.0, 743.0, 720.0, 697.0], [791.0, 791.0, 784.0, 780.0, 780.0, 784.0, 782.0, 777.0, 765.0, 773.0, 774.0, 772.0, 768.0, 753.0, 760.0, 750.0, 743.0, 729.0, 717.0, 700.0], [787.0, 789.0, 786.0, 779.0, 779.0, 779.0, 779.0, 765.0, 763.0, 762.0, 759.0, 768.0, 764.0, 760.0, 752.0, 753.0, 743.0, 726.0, 721.0, 697.0], [796.0, 790.0, 783.0, 786.0, 784.0, 782.0, 778.0, 771.0, 768.0, 765.0, 770.0, 767.0, 758.0, 757.0, 755.0, 751.0, 747.0, 741.0, 727.0, 712.0], [794.0, 791.0, 790.0, 777.0, 780.0, 785.0, 778.0, 770.0, 775.0, 770.0, 772.0, 771.0, 772.0, 760.0, 761.0, 753.0, 747.0, 740.0, 730.0, 707.0], [795.0, 789.0, 794.0, 780.0, 785.0, 775.0, 783.0, 780.0, 781.0, 774.0, 771.0, 775.0, 769.0, 777.0, 761.0, 762.0, 758.0, 742.0, 732.0, 725.0], [796.0, 798.0, 795.0, 790.0, 793.0, 787.0, 794.0, 787.0, 786.0, 785.0, 778.0, 779.0, 783.0, 779.0, 773.0, 765.0, 755.0, 751.0, 737.0, 711.0], [794.0, 800.0, 788.0, 783.0, 797.0, 793.0, 793.0, 793.0, 788.0, 783.0, 782.0, 788.0, 789.0, 789.0, 772.0, 766.0, 756.0, 745.0, 730.0, 719.0], [800.0, 804.0, 802.0, 798.0, 800.0, 794.0, 810.0, 797.0, 795.0, 788.0, 800.0, 791.0, 787.0, 785.0, 775.0, 770.0, 761.0, 749.0, 741.0, 718.0], [806.0, 801.0, 802.0, 795.0, 798.0, 800.0, 799.0, 801.0, 794.0, 792.0, 789.0, 791.0, 790.0, 775.0, 779.0, 771.0, 759.0, 744.0, 738.0, 725.0], [800.0, 797.0, 804.0, 800.0, 794.0, 795.0, 805.0, 786.0, 790.0, 797.0, 788.0, 788.0, 791.0, 779.0, 776.0, 770.0, 761.0, 745.0, 741.0, 720.0], [800.0, 794.0, 797.0, 794.0, 791.0, 794.0, 793.0, 790.0, 784.0, 785.0, 789.0, 791.0, 792.0, 789.0, 776.0, 773.0, 753.0, 752.0, 742.0, 726.0], [797.0, 804.0, 795.0, 794.0, 792.0, 793.0, 794.0, 794.0, 785.0, 785.0, 785.0, 789.0, 786.0, 792.0, 777.0, 775.0, 770.0, 750.0, 737.0, 727.0], [802.0, 809.0, 809.0, 797.0, 796.0, 798.0, 791.0, 789.0, 790.0, 786.0, 794.0, 782.0, 793.0, 789.0, 782.0, 775.0, 763.0, 764.0, 746.0, 743.0], [798.0, 806.0, 808.0, 795.0, 797.0, 797.0, 806.0, 791.0, 790.0, 784.0, 790.0, 785.0, 788.0, 787.0, 777.0, 777.0, 769.0, 772.0, 760.0, 736.0], [803.0, 820.0, 810.0, 821.0, 814.0, 810.0, 810.0, 798.0, 794.0, 799.0, 789.0, 798.0, 800.0, 788.0, 789.0, 787.0, 773.0, 773.0, 765.0, 745.0], [805.0, 813.0, 819.0, 817.0, 812.0, 806.0, 818.0, 805.0, 804.0, 799.0, 803.0, 792.0, 792.0, 803.0, 790.0, 784.0, 776.0, 771.0, 759.0, 754.0], [808.0, 818.0, 825.0, 828.0, 818.0, 832.0, 811.0, 815.0, 813.0, 800.0, 810.0, 798.0, 809.0, 807.0, 794.0, 782.0, 780.0, 777.0, 771.0, 756.0], [816.0, 819.0, 833.0, 820.0, 819.0, 817.0, 816.0, 813.0, 806.0, 810.0, 812.0, 800.0, 802.0, 803.0, 800.0, 789.0, 784.0, 781.0, 778.0, 772.0], [809.0, 831.0, 822.0, 824.0, 823.0, 815.0, 825.0, 814.0, 816.0, 812.0, 806.0, 803.0, 806.0, 798.0, 795.0, 781.0, 786.0, 782.0, 771.0, 763.0], [807.0, 826.0, 822.0, 819.0, 816.0, 824.0, 808.0, 814.0, 821.0, 808.0, 806.0, 802.0, 800.0, 802.0, 793.0, 791.0, 783.0, 775.0, 767.0, 761.0], [800.0, 822.0, 822.0, 819.0, 816.0, 817.0, 821.0, 816.0, 808.0, 811.0, 799.0, 812.0, 798.0, 800.0, 801.0, 785.0, 784.0, 786.0, 776.0, 775.0], [690.0, 820.0, 825.0, 811.0, 812.0, 812.0, 819.0, 819.0, 808.0, 807.0, 803.0, 804.0, 792.0, 798.0, 796.0, 782.0, 780.0, 781.0, 772.0, 764.0], [779.0, 815.0, 809.0, 812.0, 812.0, 811.0, 814.0, 817.0, 815.0, 799.0, 799.0, 798.0, 797.0, 800.0, 784.0, 781.0, 782.0, 779.0, 768.0, 756.0]]

##avg brightness
#Z_real2 = [[5.668156770833333, 5.672307291666667, 5.674800520833333, 5.6424489583333335, 5.668315104166667, 5.6397635416666665, 5.583347916666667, 5.5740703125, 5.565513541666666, 5.537916145833333, 5.5434265625, 5.519547916666666, 5.46671875, 5.453188541666667, 5.399910416666667, 5.351086979166666, 5.281080729166667, 5.205694791666667, 5.054409895833333, 4.9305489583333335], [5.670440625, 5.696174479166666, 5.650581770833333, 5.6642838541666665, 5.635767708333334, 5.62394375, 5.601425, 5.574154166666666, 5.5428828125, 5.5414625, 5.533150520833333, 5.5373296875, 5.485493229166667, 5.42014375, 5.4469770833333335, 5.32859375, 5.24951875, 5.18804375, 5.0837890625, 4.91453125], [5.683625, 5.6715479166666665, 5.6222770833333335, 5.647171354166667, 5.631004166666667, 5.616098958333334, 5.5933078125, 5.567294270833333, 5.561902083333333, 5.538799479166666, 5.553482291666667, 5.539429166666666, 5.489295833333333, 5.456881770833333, 5.420872916666666, 5.366724479166667, 5.299333333333333, 5.210257291666666, 5.08485625, 4.9850546875], [5.6665265625, 5.655406770833333, 5.631838020833333, 5.624830208333333, 5.650218229166667, 5.639920833333333, 5.579913020833334, 5.574525, 5.559703125, 5.5549015625, 5.5649046875, 5.552482291666666, 5.501624479166667, 5.502076041666666, 5.448494791666667, 5.3507796875, 5.315322395833333, 5.252870833333334, 5.117495833333333, 4.978640104166667], [5.709178645833333, 5.687557291666667, 5.6588265625, 5.647347395833333, 5.631816145833334, 5.633306770833333, 5.6090171875, 5.577608333333333, 5.593010416666667, 5.611090104166666, 5.5967234375, 5.5932265625, 5.5542015625, 5.500481770833333, 5.4508625, 5.42553125, 5.3313796875, 5.249193229166667, 5.1290609375, 5.0110453125], [5.681796354166667, 5.6909671875, 5.679606770833334, 5.6491828125, 5.639078125, 5.66298125, 5.636827083333333, 5.632327604166667, 5.63533125, 5.6105375, 5.6383125, 5.626631770833334, 5.580209375, 5.5294453125, 5.519902083333333, 5.469128645833333, 5.3583375, 5.2870734375, 5.201369270833333, 5.108945833333333], [5.720908854166667, 5.712365625, 5.6810921875, 5.6880546875, 5.708354166666667, 5.67426875, 5.675486979166666, 5.6706515625, 5.673469270833333, 5.6806171875, 5.6680765625, 5.6724546875, 5.631875, 5.615869791666666, 5.57123125, 5.4941796875, 5.418978125, 5.310061458333333, 5.210208854166667, 5.0675484375], [5.735177083333333, 5.762027604166667, 5.708831770833333, 5.6751796875, 5.7254796875, 5.720085416666667, 5.717627604166666, 5.699230208333334, 5.69169375, 5.6939416666666665, 5.717703645833334, 5.701682291666667, 5.657422395833334, 5.6195546875, 5.570525520833334, 5.510121875, 5.45025, 5.228936458333333, 5.249002083333333, 5.1026171875], [5.753484895833333, 5.7464208333333335, 5.747840625, 5.726363541666666, 5.710710416666666, 5.728527604166667, 5.755494270833333, 5.7202411458333335, 5.705834375, 5.739773958333333, 5.7190203125, 5.714776041666667, 5.691765625, 5.616668229166667, 5.614428125, 5.584986458333334, 5.4566125, 5.375931770833334, 5.232317708333333, 5.0659734375], [5.766329166666667, 5.773915104166667, 5.7561479166666665, 5.717528645833333, 5.710819270833333, 5.7463421875, 5.754138541666666, 5.743126041666667, 5.715732291666667, 5.7170994791666665, 5.7404578125, 5.719075, 5.6545463541666665, 5.606828645833334, 5.6092234375, 5.536540104166667, 5.462324479166667, 5.379526041666667, 5.231648958333333, 5.110661979166666], [5.753923958333333, 5.7890953125, 5.770044270833333, 5.727320833333334, 5.7296317708333335, 5.746797395833333, 5.763484375, 5.7237125, 5.709617708333333, 5.7309859375, 5.714225520833334, 5.731200520833333, 5.7180671875, 5.659997916666667, 5.6099484375, 5.549953645833333, 5.46496875, 5.357990625, 5.242834375, 5.1368625], [5.7578578125, 5.784016145833333, 5.768961458333333, 5.714979166666667, 5.744808854166667, 5.762926041666667, 5.783609375, 5.727019791666667, 5.751950520833334, 5.766369270833334, 5.728556770833333, 5.718636458333333, 5.711046875, 5.649877604166667, 5.611835416666667, 5.53899375, 5.488496354166666, 5.382638541666667, 5.30686875, 5.1331291666666665], [5.7817640625, 5.814650520833333, 5.775591145833333, 5.737758333333334, 5.760428645833334, 5.780998958333333, 5.774670833333333, 5.767506770833333, 5.7691109375, 5.7564015625, 5.7627182291666665, 5.7847109375, 5.719025, 5.653730729166667, 5.61236875, 5.573403125, 5.4765640625, 5.423477083333333, 5.312975520833334, 5.170322395833334], [5.801389583333333, 5.810839583333333, 5.797190625, 5.7297859375, 5.759847395833333, 5.769530729166667, 5.787591666666667, 5.789421354166667, 5.784163541666667, 5.803064583333334, 5.783283854166666, 5.790666145833334, 5.745625, 5.7209921875, 5.642357291666666, 5.5635, 5.512134375, 5.420109895833333, 5.323309375, 5.218747395833334], [5.829179166666667, 5.837790625, 5.8187203125, 5.780461979166667, 5.787866145833333, 5.810386458333333, 5.823819270833333, 5.84293125, 5.829515104166667, 5.833882291666667, 5.81010625, 5.809215625, 5.7885479166666665, 5.734878125, 5.656364583333334, 5.5750625, 5.528759895833334, 5.429861979166667, 5.320734895833334, 5.200953645833334], [5.858181770833333, 5.857008333333333, 5.840083333333333, 5.815173958333333, 5.841333333333333, 5.840116666666667, 5.859069791666666, 5.821740625, 5.837964583333333, 5.834636458333334, 5.851002604166666, 5.8220703125, 5.82206875, 5.725730208333333, 5.675348958333333, 5.5967234375, 5.511880208333333, 5.4173723958333335, 5.3255223958333335, 5.230671875], [5.890813020833333, 5.888309895833333, 5.869728645833334, 5.853929166666667, 5.856061979166666, 5.863733854166667, 5.892778645833333, 5.836513541666666, 5.865380208333334, 5.8432796875, 5.863750520833333, 5.855904166666667, 5.825486979166667, 5.769977083333333, 5.679716145833333, 5.608088541666667, 5.523861979166667, 5.4135765625, 5.322008333333334, 5.20349375], [5.8850401041666665, 5.902513020833333, 5.878241145833333, 5.8540484375, 5.865548958333333, 5.8756104166666665, 5.896278645833333, 5.850179166666667, 5.86031875, 5.84225625, 5.8404390625, 5.831338020833333, 5.815415625, 5.7269, 5.667063020833333, 5.603003125, 5.470422916666666, 5.412205208333333, 5.345829166666666, 5.248827604166666], [5.878473958333333, 5.8986729166666665, 5.880424479166667, 5.858559895833333, 5.8557984375, 5.8643692708333335, 5.886741145833334, 5.8302078125, 5.836403645833333, 5.8334026041666664, 5.820828645833333, 5.819698958333333, 5.7977375, 5.715230208333334, 5.654055729166667, 5.595302604166666, 5.513097395833333, 5.4075291666666665, 5.352563541666667, 5.2240484375], [5.853089583333333, 5.887119270833334, 5.876478645833333, 5.842321875, 5.832136979166667, 5.861371354166667, 5.8613078125, 5.856165625, 5.818977604166666, 5.799953125, 5.801871875, 5.8095359375, 5.76148125, 5.681219270833333, 5.638005208333333, 5.5744401041666665, 5.498478645833333, 5.4523015625, 5.383238541666667, 5.224659375], [5.803348958333333, 5.8841421875, 5.880823958333333, 5.855258854166666, 5.8313171875, 5.840315104166667, 5.861270833333333, 5.8413890625, 5.790415104166667, 5.812059375, 5.796063541666666, 5.807282291666667, 5.754686979166666, 5.724280208333333, 5.635033333333333, 5.592133333333333, 5.5385984375, 5.444601041666667, 5.3850125, 5.261976041666666], [5.84400625, 5.910957291666667, 5.875382291666667, 5.841560416666667, 5.815485416666666, 5.8593270833333335, 5.858990625, 5.829088541666667, 5.818770833333334, 5.772977083333333, 5.819799479166667, 5.761197395833333, 5.7711609375, 5.7179640625, 5.678158854166667, 5.601625520833333, 5.546141145833333, 5.495475520833334, 5.408909375, 5.3288015625], [5.842472395833333, 5.914691666666666, 5.895929166666667, 5.852440625, 5.8186453125, 5.857332291666666, 5.867241666666667, 5.8489046875, 5.785307291666666, 5.7881484375, 5.803165625, 5.769813541666666, 5.76931875, 5.740073958333333, 5.685642708333333, 5.626409375, 5.5787515625, 5.512738541666667, 5.437244270833333, 5.324409895833333], [5.8093953125, 5.911383854166667, 5.896569270833333, 5.897905729166666, 5.888894791666667, 5.883091145833333, 5.886410416666667, 5.837952083333334, 5.822348958333333, 5.829692708333333, 5.8101890625, 5.789461979166667, 5.810411458333333, 5.763308854166667, 5.712325520833334, 5.637291666666667, 5.5872125, 5.517913020833333, 5.4667984375, 5.383397395833334], [5.844294270833333, 5.9160203125, 5.925591145833334, 5.910704166666667, 5.884730208333333, 5.8802140625, 5.918130729166666, 5.868375, 5.847041666666667, 5.825169791666666, 5.819448958333333, 5.813513020833334, 5.799503125, 5.788680208333333, 5.741525520833333, 5.676419270833334, 5.606490104166666, 5.554994270833333, 5.455167708333334, 5.389424479166666], [5.8575296875, 5.951144270833334, 5.957131770833334, 5.9434890625, 5.9113921875, 5.9317942708333335, 5.893860416666667, 5.882282291666667, 5.860585416666667, 5.84845, 5.8338020833333335, 5.791085416666666, 5.789522395833333, 5.787180208333333, 5.726558333333333, 5.6647453125, 5.603115625, 5.561246875, 5.488544270833334, 5.422152083333334], [5.8725213541666665, 5.953248958333333, 5.986270833333333, 5.938513541666667, 5.9077270833333335, 5.917186458333333, 5.9295609375, 5.889080208333334, 5.8437552083333335, 5.8407869791666664, 5.811983854166667, 5.818668229166667, 5.820691145833333, 5.796325520833333, 5.739509895833334, 5.6569984375, 5.6226078125, 5.559221875, 5.516588541666667, 5.451613541666666], [5.813363020833333, 5.9780390625, 5.951963541666666, 5.9282125, 5.9179703125, 5.907771354166667, 5.915499479166667, 5.872020833333333, 5.851191145833333, 5.798556770833334, 5.834875520833333, 5.822438020833333, 5.797771875, 5.774039583333333, 5.740535416666667, 5.6667427083333335, 5.639279166666666, 5.596531770833334, 5.5054364583333335, 5.4424859375], [5.7338484375, 5.948733333333333, 5.945301041666666, 5.913140625, 5.899357291666667, 5.883183854166667, 5.801118229166667, 5.8772296875, 5.8524359375, 5.829434375, 5.802558854166667, 5.7994489583333335, 5.784215104166667, 5.772103125, 5.7047265625, 5.68003125, 5.618117708333333, 5.569509375, 5.5101734375, 5.456175520833333], [5.638470833333334, 5.961478125, 5.9226765625, 5.8916916666666665, 5.8797515625, 5.895161979166667, 5.892888541666666, 5.896690625, 5.840536979166667, 5.8384302083333335, 5.8020859375, 5.789706770833333, 5.751183854166666, 5.773146354166666, 5.731241145833334, 5.679684895833334, 5.627388020833333, 5.580763541666666, 5.521155729166667, 5.500655208333334], [4.6716875, 5.911325, 5.897938541666667, 5.916543229166667, 5.879292708333334, 5.895791666666667, 5.86516875, 5.84780625, 5.835596354166666, 5.8063265625, 5.784527083333334, 5.76466875, 5.737495833333333, 5.7686171875, 5.717549479166666, 5.646023958333333, 5.601740104166667, 5.549217708333333, 5.5281421875, 5.4917401041666665], [5.355788541666667, 5.863640625, 5.906445833333334, 5.904955729166667, 5.8852239583333334, 5.8856671875, 5.8670192708333335, 5.8792109375, 5.818772395833333, 5.8079421875, 5.784022916666666, 5.7779484375, 5.748425, 5.716264583333333, 5.648052083333333, 5.627225520833333, 5.5868828125, 5.526913020833334, 5.508033333333334, 5.438461458333333]]

Z_real2 = np.array(Z_real2)



# do plane fit
xs = []
ys = []
zs = []
# real1
for i in range(len(X)):
    for j in range(len(Y)):
        xs.append(X[i]/1000)
        ys.append(Y[j]/1000)
        zs.append(Z_real2[j][i])  #here
xs = np.array(xs)
ys = np.array(ys)
zs = np.array(zs)

# do fit
tmp_A = []
tmp_A2 = []
tmp_b = []
for i in range(len(xs)):
#    tmp_A.append([xs[i], ys[i], 1])
    tmp_A.append([xs[i]*xs[i], xs[i], ys[i]*ys[i], ys[i], 1])
    tmp_A2.append([xs[i], ys[i], 1])
    tmp_b.append(zs[i])
b = np.matrix(tmp_b).T
A = np.matrix(tmp_A)
A2 = np.matrix(tmp_A2)

#*************

fit = (A.T * A).I * A.T * b
fit2 = (A2.T * A2).I * A2.T * b
errors = b - A * fit
residual = np.linalg.norm(errors)

avg = 0
max = 0
errors_list = []
for i in errors:
    avg += abs(i)
    if i > max:
        max = i
    errors_list.append(float(i))
avg = avg/len(errors)
print("Avg error: {}".format(avg))
print("Max error: {}".format(max))
print("Stdev: {}".format(stats.stdev(errors_list)))

## Manual solution
#largest_error = 1
#while largest_error > .01:
#    largest_error = 0
#    largest_error_index = 0
#
#    for i in range(len(errors)):
#        if errors[i] > largest_error:
#            largest_error = errors[i]
#            largest_error_index = i
#
#    if largest_error > .01:
#        tmp_A.pop(largest_error_index)
#        tmp_A2.pop(largest_error_index)
#        tmp_b.pop(largest_error_index)
#        print("pop {} at {}".format(largest_error, largest_error_index))
#    b = np.matrix(tmp_b).T
#    A = np.matrix(tmp_A)
#    A2 = np.matrix(tmp_A2)
#
#    # Manual solution
#    fit = (A.T * A).I * A.T * b
#    fit2 = (A2.T * A2).I * A2.T * b
#    errors = b - A * fit
#    residual = np.linalg.norm(errors)

## Manual solution
#largest_error = 100
#while largest_error > 20.0:
#    largest_error = 0
#    largest_error_index = 0
#
#    for i in range(len(errors)):
#        if errors[i] > largest_error:
#            largest_error = errors[i]
#            largest_error_index = i
#
#    if largest_error > 20.0:
#        tmp_A.pop(largest_error_index)
#        tmp_A2.pop(largest_error_index)
#        tmp_b.pop(largest_error_index)
#        print("pop {} at {}".format(largest_error, largest_error_index))
#    b = np.matrix(tmp_b).T
#    A = np.matrix(tmp_A)
#    A2 = np.matrix(tmp_A2)
#
#    # Manual solution
#    fit = (A.T * A).I * A.T * b
#    fit2 = (A2.T * A2).I * A2.T * b
#    errors = b - A * fit
#    residual = np.linalg.norm(errors)

print("solution:")
#print("{} x + {} y + {} = z".format(fit[0], fit[1], fit[2]))
print("{} x^2 + {} x + {} y^2 + {} y + {} = z".format(fit[0]/1000/1000, fit[1]/1000, fit[2]/1000/1000, fit[3]/1000, fit[4]))
avg = 0
max = 0
errors_list = []
for i in errors:
    avg += abs(i)
    if i > max:
        max = i
    errors_list.append(float(i))
avg = avg/len(errors)
print("Avg error: {}".format(avg))
print("Max error: {}".format(max))
print("Stdev: {}".format(stats.stdev(errors_list)))

X = np.arange(17800.63, 28980.63, 1118)
Y = np.arange(3615.0, 22245, 1863)

#x1 = fit[0] * 17800.63*17800.63/1000/1000 + fit[2] * 3615.0*3615.0/1000/1000
#x2 = fit[0] * 28980.63*28980.63/1000/1000 + fit[2] * 3615.0*3615.0/1000/1000
#
#y1 = fit[0] * 17800.63*17800.63/1000/1000 + fit[2] * 3615.0*3615.0/1000/1000
#y2 = fit[0] * 17800.63*17800.63/1000/1000 + fit[2] * 22245*22245/1000/1000
#print("X bow: {} Y bow: {}".format(abs(x1-x2), abs(y1-y2)))

#*************

# plot raw data
fig = plt.figure()
ax = plt.subplot(111, projection='3d')
#surf = ax.scatter(xs*1000, ys*1000, zs, color='b')

# plot plane as mesh
Z = np.zeros(X_mesh.shape)
for r in range(X_mesh.shape[0]):
    for c in range(X_mesh.shape[1]):
#        Z[r,c] = fit[0] * X_mesh[r,c]*X_mesh[r,c]/1000/1000 + fit[1] * X_mesh[r,c]/1000 + fit[2] * Y_mesh[r,c]*Y_mesh[r,c]/1000/1000 + fit[3] * Y_mesh[r,c]/1000 + fit[4]
        Z[r,c] = fit[0] * X_mesh[r,c]*X_mesh[r,c]/1000/1000 + fit[1] * X_mesh[r,c]/1000 + fit[2] * Y_mesh[r,c]*Y_mesh[r,c]/1000/1000 + fit[3] * Y_mesh[r,c]/1000 + fit[4]
#         Z[r,c] = fit[0] * X_mesh[r,c]*X_mesh[r,c]/1000/1000 + fit[1] * X_mesh[r,c]/1000 + fit[2] * Y_mesh[r,c]*Y_mesh[r,c]/1000/1000 + fit[3] * Y_mesh[r,c]/1000 + fit[4] - (-3.8019e-11 * X_mesh[r,c]*X_mesh[r,c]/1000/1000 + 2.0047e-6 * X_mesh[r,c]/1000 + 1.2761e-11 * Y_mesh[r,c]*Y_mesh[r,c]/1000/1000 + -7.0144e-6 * Y_mesh[r,c]/1000 + 48.8837)
ax.plot_wireframe(X_mesh,Y_mesh,Z, color='k')


## evaluate plane for dataset
#Z_plane = []
#for i in range(7):
#    row = []
#    for j in range(6):
#        row.append(float(fit[0]) * X[j] + float(fit[1]) * Y[i] + float(fit[2]))
#    Z_plane.append(row)
#Z_plane = np.array(Z_plane)


## create spline and evaluate for dataset
#Z_spline_int = interpolate.RectBivariateSpline(Y, X, Z_real2, kx=3, ky=3) #here
#Z_spline = []
#for i in range(7):
#    row = []
#    for j in range(6):
#        row.append(Z_spline_int.ev(i*2500, j*2500+17000))
#    Z_spline.append(row)
#Z_spline = np.array(Z_spline)
#
#print(Z_spline_int.ev(22709.38, 18098.75))


## evaluate differences
#Z_diff = []
#for i in range(7):
#    row = []
#    for j in range(6):
#        row.append(Z_real2[i][j]-Z_plane[i][j]) #here
#    Z_diff.append(row)
#Z_diff = np.array(Z_diff)


### Plot the data as mesh.
#surf = ax.plot_surface(X_mesh, Y_mesh, Z_real2, cmap=cm.coolwarm, # here
#                    linewidth=0, antialiased=False)


## Plot the diff as mesh.
#surf = ax.plot_surface(X_mesh, Y_mesh, Z_diff, cmap=cm.coolwarm,
#                    linewidth=0, antialiased=False)
#

## plot the spline as mesh
#Z_spline = []
#for i in range(175):
#    row = []
#    for j in range(150):
#        row.append(Z_spline_int.ev(i*100, j*100+17000))
#    Z_spline.append(row)
#Z_spline = np.array(Z_spline)
## Plot extrapolated data?
#surf = ax.plot_surface(X_mesh, Y_mesh, Z_spline, cmap=cm.coolwarm,
#                        linewidth=0, antialiased=False)


## Customize the z axis.
##ax.set_zlim(49.2, 49.4)
#ax.zaxis.set_major_locator(LinearLocator(10))
#ax.zaxis.set_major_formatter(FormatStrFormatter('%.03f'))
#
## Add a color bar which maps values to colors.
#fig.colorbar(surf, shrink=0.5, aspect=5)

ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')

#plt.title('Focus Position')
#plt.title('Max Pixel Value of Single Image (w/threshold)')
#plt.title('Average Pixel Value of Single Image (w/threshold)')

plt.show()
